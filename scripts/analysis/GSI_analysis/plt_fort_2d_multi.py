##################################################################################
# Description
##################################################################################
# This script is the companion proc_fort_2d.py.  This will
# load the dataframe generated by the processing script and plot the time series
# of values for the 
# across the analysis times and the two outer-loops of the GSI analysis.
#
# The range of fort.220 files will be pre-processed into a Pandas dataframe
# and this plotting script should point to the output of the preprocessing script
# for the input file.
#
# The dataframes are saved into a Pickled dictionary organized by domain number
# 'd0X', with the dataframe columns given as 
#
#    'step' : Index of the number of GSI steps, from first analysis
#    'date' : Crurent analysis date time
#    'loop' : Outter-loop index for the optimization in GSI
#    'iter' : Iteration of the current loop in GSI
#    'cost' : Cost function return value in current iteration
#    'grad' : Gradient norm return value in the current iteration
#
# Data input and plot output directories should be defined in the below along
# with MAX_DOM to control the number of domains processed.  Testing on more
# than one domain is still pending.
#
##################################################################################
# License Statement:
##################################################################################
# This software is Copyright © 2024 The Regents of the University of California.
# All Rights Reserved. Permission to copy, modify, and distribute this software
# and its documentation for educational, research and non-profit purposes,
# without fee, and without a written agreement is hereby granted, provided that
# the above copyright notice, this paragraph and the following three paragraphs
# appear in all copies. Permission to make commercial use of this software may
# be obtained by contacting:
#
#     Office of Innovation and Commercialization
#     9500 Gilman Drive, Mail Code 0910
#     University of California
#     La Jolla, CA 92093-0910
#     innovation@ucsd.edu
#
# This software program and documentation are copyrighted by The Regents of the
# University of California. The software program and documentation are supplied
# "as is", without any accompanying services from The Regents. The Regents does
# not warrant that the operation of the program will be uninterrupted or
# error-free. The end-user understands that the program was developed for
# research purposes and is advised not to rely exclusively on the program for
# any reason.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
# LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION,
# EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED
# HEREUNDER IS ON AN “AS IS” BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO
# OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
# MODIFICATIONS.
# 
# 
##################################################################################
# Imports
##################################################################################
import numpy as np
import pandas as pd
import pickle
import datetime
import matplotlib
# use this setting on COMET / Skyriver for x forwarding
matplotlib.use('TkAgg')
from matplotlib import pyplot as plt
from matplotlib.ticker import PercentFormatter
import seaborn as sns
from gsi_py_utilities import USR_HME

##################################################################################
# SET GLOBAL PARAMETERS 
##################################################################################
# define control flow to analyze 
CTR_FLWS = [
            '3denvar_lag00_b0.00',
            #'3denvar_lag00_b0.10',
            #'3denvar_lag00_b0.20',
            '3denvar_lag00_b0.30',
            #'3denvar_lag00_b0.40',
            '3denvar_lag00_b0.50',
            #'3denvar_lag00_b0.60',
            '3denvar_lag00_b0.70',
            #'3denvar_lag00_b0.80',
            #'3denvar_lag00_b0.90',
            '3denvar_lag00_b1.00',
           ]

# define the case-wise sub-directory
CSE = 'VD'

# starting date and zero hour of data
START_DT = '2019-02-09T00:00:00'

# final date and zero hour of data
END_DT = '2019-02-15T00:00:00'

# define the background or analysis to plot
#STG = 'ANL'
STG = 'BKG'

# define domain to plot
DOM = 1

# define the fort number to plot
FORT='201'

##################################################################################
# Begin plotting
##################################################################################
# define two panel figure with pre-defined size
fig = plt.figure(figsize=(16,8))
ax1 = fig.add_axes([.110, .25, .85, .33])
ax0 = fig.add_axes([.110, .58, .85, .33])

# set colors and storage for looping
num_flws = len(CTR_FLWS)
line_colors = sns.color_palette("husl", num_flws)
line_list = []
line_labs = []

for k in range(num_flws):
    # loop on control flows
    ctr_flw = CTR_FLWS[k]
    param = ctr_flw.split('_')[-1]

    # define derived data paths
    cse = CSE + '/' + ctr_flw
    data_root = USR_HME + '/data/analysis' + '/' + cse + '/GSI_analysis'
    in_path = data_root + '/GSI_fort_' + FORT + '_' + START_DT + '_to_' +\
              END_DT + '.bin'
    out_path = data_root + '/GSI_fort_' + FORT + '_' + str(DOM) + '_' +\
               START_DT + '_to_' + END_DT + '.png'
    
    # load and plot data
    f = open(in_path, 'rb')
    data = pickle.load(f)
    f.close()
    
    # load dataframe
    exec('data = data[\'d0%s\']'%DOM)
    
    # subset monitored data
    bkg_mon = data.loc[(data['use'] == 'mon') & (data['iter'] == 1.0)]
    anl_mon = data.loc[(data['use'] == 'mon') & (data['iter'] == 2.0)]
    
    # subset assimilated data
    bkg_asm = data.loc[(data['use'] == 'asm') & (data['iter'] == 1.0)]
    anl_asm = data.loc[(data['use'] == 'asm') & (data['iter'] == 2.0)]
    
    # subset rejected data
    bkg_rej = data.loc[(data['use'] == 'rej') & (data['iter'] == 1.0)]
    anl_rej = data.loc[(data['use'] == 'rej') & (data['iter'] == 2.0)]
    
    # define looping index
    index = len(bkg_asm['rms'].values)
    
    # compute percent rejected
    b_per_rej = np.zeros(index)
    a_per_rej = np.zeros(index)
    for i in range(index):
        b_num_mon = bkg_mon['count'].values[i]
        a_num_mon = anl_mon['count'].values[i]
    
        b_num_rej = bkg_rej['count'].values[i]
        a_num_rej = anl_rej['count'].values[i]
    
        b_num_asm = bkg_asm['count'].values[i]
        a_num_asm = anl_asm['count'].values[i]
    
        b_per_rej[i] = 100 * b_num_rej / (b_num_rej + b_num_asm)
        a_per_rej[i] = 100 * a_num_rej / (a_num_rej + a_num_asm)
    
    # generate lines, saving values for legend
    if STG == 'ANL':
        rms = anl_asm['rms']
        rej = a_per_rej

    elif STG == 'BKG':
        rms = bkg_asm['rms']
        rej = b_per_rej

    l, = ax0.plot(range(index), rms, linewidth=2,
                  marker=(3 + k, 0, 0), markersize=18, color=line_colors[k])
    ax1.plot(range(index), rej, linewidth=2,
             marker=(3 + k, 0, 0), markersize=18, color=line_colors[k])
    
    line_list.append(l)
    line_labs.append(param)
    
dates = bkg_mon['date'].values
tic_mark = []
tic_labs = []

tic_count = 0
for i in range(0, index):
    tic_mark.append(i)

    if tic_count % 2 == 0:
        date_str = str(dates[i]).split(':')[0]
        tic_labs.append(date_str)

    else:
        tic_labs.append("")

    tic_count += 1

##################################################################################
# define display parameters

#plot bounds
ax0.set_xlim([-1,index])
ax1.set_xlim([-1,index])

ax0.set_xticks(tic_mark)
ax1.set_xticks(tic_mark, labels=tic_labs, rotation=45, ha='right')

# tick parameters
ax0.tick_params(
    labelsize=20,
    labelbottom=False,
    )

ax1.tick_params(
    labelsize=20,
    )

ax1.yaxis.set_major_formatter(PercentFormatter(decimals=0))

# add legend and sub-titles
fig.legend(line_list, line_labs, fontsize=18, ncol=min(num_flws,6),
           loc='upper center')

lab1 = STG + ' RMSE'
lab2 = STG + ' % obs rej'
plt.figtext(.05, .415, lab2, horizontalalignment='right', rotation=90,
            verticalalignment='center', fontsize=22)

plt.figtext(.05, .745, lab1, horizontalalignment='right', rotation=90,
            verticalalignment='center', fontsize=22)


# save figure and display
plt.savefig(out_path)
plt.show()

##################################################################################
# end
