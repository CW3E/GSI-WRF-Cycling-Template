##################################################################################
# Description
##################################################################################
# This script is a re-write of the GSI utilities GSI_cost_gradient.ncl
# in Python to be use with the companion proc_GSI_cost_gradient.py.  This will
# load the dataframe generated by the processing script and plot the time series
# of values for the cost function and the norm of the cost function gradient
# across the analysis times and the two outer-loops of the GSI analysis.
#
# The range of fort.220 files will be pre-processed into a Pandas dataframe
# and this plotting script should point to the output of the preprocessing script
# for the input file.
#
# The dataframes are saved into a Pickled dictionary organized by domain number
# 'd0X', with the dataframe columns given as 
#
#    'step' : Index of the number of GSI steps, from first analysis
#    'date' : Crurent analysis date time
#    'loop' : Outter-loop index for the optimization in GSI
#    'iter' : Iteration of the current loop in GSI
#    'cost' : Cost function return value in current iteration
#    'grad' : Gradient norm return value in the current iteration
#
# Data input and plot output directories should be defined in the below along
# with MAX_DOM to control the number of domains processed.  Testing on more
# than one domain is still pending.
#
# NOTE: this has the number of iterations hard coded in the loop at 50 + 0 for
# first guess, but this may not be correct if there are errors in GSI.  Need to
# fix.
#
##################################################################################
# License Statement:
##################################################################################
# This software is Copyright © 2024 The Regents of the University of California.
# All Rights Reserved. Permission to copy, modify, and distribute this software
# and its documentation for educational, research and non-profit purposes,
# without fee, and without a written agreement is hereby granted, provided that
# the above copyright notice, this paragraph and the following three paragraphs
# appear in all copies. Permission to make commercial use of this software may
# be obtained by contacting:
#
#     Office of Innovation and Commercialization
#     9500 Gilman Drive, Mail Code 0910
#     University of California
#     La Jolla, CA 92093-0910
#     innovation@ucsd.edu
#
# This software program and documentation are copyrighted by The Regents of the
# University of California. The software program and documentation are supplied
# "as is", without any accompanying services from The Regents. The Regents does
# not warrant that the operation of the program will be uninterrupted or
# error-free. The end-user understands that the program was developed for
# research purposes and is advised not to rely exclusively on the program for
# any reason.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
# LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION,
# EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED
# HEREUNDER IS ON AN “AS IS” BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO
# OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
# MODIFICATIONS.
# 
# 
##################################################################################
# Imports
##################################################################################
import numpy as np
import pandas as pd
import pickle
import datetime
import matplotlib
# use this setting on COMET / Skyriver for x forwarding
matplotlib.use('TkAgg')
from matplotlib import pyplot as plt
from gsi_py_utilities import USR_HME

##################################################################################
# SET GLOBAL PARAMETERS 
##################################################################################
# define control flow to analyze 
CTR_FLW = '3denvar_lag00_b1.00'

# define the case-wise sub-directory
CSE = 'VD'

# starting date and zero hour of data
START_DT = '2019-02-09T00:00:00'

# final date and zero hour of data
END_DT = '2019-02-15T00:00:00'

# define domain to plot
DOM = 1

##################################################################################
# Begin plotting
##################################################################################
# define derived data paths
cse = CSE + '/' + CTR_FLW
data_root = USR_HME + '/data/analysis' + '/' + cse + '/GSI_analysis'
in_path = data_root + '/GSI_cost_grad_anl_' + START_DT + '_to_' +\
          END_DT + '.bin'
out_path = data_root + '/GSI_cost_grad_anl_d0' + str(DOM) + '_' +\
           START_DT + '_to_' + END_DT + '.png'


# load and plot data
f = open(in_path, 'rb')
data = pickle.load(f)
f.close()

# load dataframe
exec('data = data[\'d0%s\']'%DOM)

# define two panel figure with pre-defined size
fig = plt.figure(figsize=(16,8))
ax1 = fig.add_axes([.11, .25, .85, .33])
ax0 = fig.add_axes([.11, .58, .85, .33])

# set colors and storage for looping
line_colors = ['#d95f02', '#7570b3']

# generate lines, saving values for legend
l0, = ax0.plot(data['cost'], linewidth=2, markersize=26, color=line_colors[0])
l1, = ax1.plot(data['grad'], linewidth=2, markersize=26, color=line_colors[1])

index = data.index.values[-1]
dates = data['date'].values
tic_mark = []
tic_labs = []

tic_count = 0
for i in range(0, index, 102):
    ax0.axvline(x=i, linestyle=':', linewidth=1.25, color='k')
    l2 = ax1.axvline(x=i, linestyle=':', linewidth=1.25, color='k')
    tic_mark.append(i)
    date_str = str(dates[i]).split(':')[0]

    if tic_count % 2 == 0:
        tic_labs.append(date_str)
    else:
        tic_labs.append("")

    tic_count += 1

for i in range(51, index+1, 102):
    ax0.axvline(x=i, linestyle=':', linewidth=1.25, color='#1b9e77')
    l3 = ax1.axvline(x=i, linestyle=':', linewidth=1.25, color='#1b9e77')

line_list = [l0, l1, l2, l3]
line_labs = ['Cost', 'Gradient Norm', 'Outer loop 1', 'Outer loop 2']

##################################################################################
# define display parameters

#plot bounds
ax0.set_xlim([0,index])
ax1.set_xlim([0,index])
ax1.set_yscale('log')

ax0.set_xticks(tic_mark)
ax1.set_xticks(tic_mark, labels=tic_labs, rotation=45, ha='right')

# tick parameters
ax0.tick_params(
    labelsize=20,
    labelbottom=False,
    )

ax1.tick_params(
    labelsize=20,
    )

# add legend and sub-titles
fig.legend(line_list, line_labs, fontsize=22, ncol=4, loc='upper center')

# save figure and display
plt.savefig(out_path)
plt.show()

##################################################################################
# end
