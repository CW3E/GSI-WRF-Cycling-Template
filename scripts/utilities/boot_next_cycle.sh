#!/bin/bash
##################################################################################
# Description
##################################################################################
# This utility script is designed to force Rocoto to run complex workflows that
# fail when cycles refuse to trigger.  This was generated by testing and modifying
# the Rocoto source such that the file located from the clone root:
#
# rocoto/lib/workflowmgr/workflowengine.rb
# 
# in line 408 is edited to read:
#
# reply='y'
#
# thereby removing the interactive prompt.  This allows one to rocoto boot the
# next cycle first task by grepping the rocoto workflow logs and prompting the
# cycle to run using a dummy task "boot_next_cycle" which can be trigged based on
# arbitrary conditions within the current cycle.  This is a very hacky solution and
# will be made obsolete when the system is fully re-written for using Cylc to
# improve performance, long-term support and overall reliability.
#
##################################################################################
# License Statement:
##################################################################################
# This software is Copyright © 2024 The Regents of the University of California.
# All Rights Reserved. Permission to copy, modify, and distribute this software
# and its documentation for educational, research and non-profit purposes,
# without fee, and without a written agreement is hereby granted, provided that
# the above copyright notice, this paragraph and the following three paragraphs
# appear in all copies. Permission to make commercial use of this software may
# be obtained by contacting:
#
#     Office of Innovation and Commercialization
#     9500 Gilman Drive, Mail Code 0910
#     University of California
#     La Jolla, CA 92093-0910
#     innovation@ucsd.edu
#
# This software program and documentation are copyrighted by The Regents of the
# University of California. The software program and documentation are supplied
# "as is", without any accompanying services from The Regents. The Regents does
# not warrant that the operation of the program will be uninterrupted or
# error-free. The end-user understands that the program was developed for
# research purposes and is advised not to rely exclusively on the program for
# any reason.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
# LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION,
# EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED
# HEREUNDER IS ON AN “AS IS” BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO
# OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
# MODIFICATIONS.
# 
#
##################################################################################

if [ ! ${CLNE_ROOT} ]; then 
  echo "ERROR: clone root \${CLNE_ROOT} is not defined."
  exit 1
fi

if [ ! ${CYC} ]; then
  echo "ERROR: next cycle date time \${CYC} is not defined."
  exit 1
fi

if [ ! ${CSE} ]; then
  echo "ERROR: case study \${CSE} is not defined."
  exit 1
fi

if [ ! ${FLW} ]; then
  echo "ERROR: control flow \${FLW} is not defined."
  exit 1
fi

# define the workflow log
worklog=${CLNE_ROOT}/workflow_status/${CSE}-${FLW}_workflow_status.txt 

# check the number of lines
linecount=`wc -l < ${worklog}`

if [ ! -r ${worklog} ]; then
  echo "ERROR: worfklow log ${worklog} does not exist or is not readable."
  exit 1
elif [ ${linecount} -eq 0 ]; then
  echo "ERROR: workflow log ${worklog} is empty."
  exit 1
else
  # grep the next task from the workflow status log
  IFS=" " read -ra cyc_stat <<< `grep "${CYC}" ${worklog} | head -n 1`
fi

# unpack next task to boot from the status log
tsk=${cyc_stat[1]}

cmd="cd ${CLNE_ROOT}"
echo ${cmd}; eval ${cmd}

cmd="python -c 'import rocoto_utilities; rocoto_utilities.run_rocotoboot([\"${CSE}\"],[\"${FLW}\"],[\"${CYC}\"],[\"${tsk}\"])'"
echo ${cmd}; eval ${cmd}

cmd="sleep 300"
echo ${cmd}; eval ${cmd}

# check for an update to the workflow log with new status for job
if [ ! -r ${worklog} ]; then
  echo "ERROR: worfklow log ${worklog} does not exist or is not readable."
  exit 1
elif [ ${linecount} -eq 0 ]; then
  echo "ERROR: workflow log ${worklog} is empty."
  exit 1
else
  IFS=" " read -ra cyc_stat <<< `grep "${CYC}" ${worklog} | head -n 1`
fi

# define a regular expression to match integer patterns to check for job id
re='^[0-9]+$'

# unpack grepped line
cycle=${cyc_stat[0]}
task=${cyc_stat[1]}
job_id=${cyc_stat[2]}

if ! [[ ${job_id} =~ ${re} ]]; then
  echo "ERROR: task did not update."
  exit 1
else
  echo "Task ${task} booted for cycle ${cycle} with job id:"
  echo "${job_id}"
fi

echo "Script completed at `date +%Y-%m-%d_%H_%M_%S`."
exit 0
